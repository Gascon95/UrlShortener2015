buildscript {
  repositories {
	mavenCentral()
	maven { url 'http://userRepository.spring.io/release' }
  }
  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.2.6.RELEASE'
    classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
  }
}

project.ext {
    httpClientVersion = "4.5.1"
}

eclipse {
   project {
      name = 'UrlShortener2015.candypink'
   }
}

apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'

/*
//STOMP Websockets
jar {
    baseName = 'gs-messaging-stomp-websocket'
    version =  '0.1.0'
}*/

mainClassName = 'urlshortener2015.candypink.Application'

sourceSets.main.java.srcDirs += "${buildDir}/generated-sources/jaxb"

// tag::xsd[]
task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.schema = "src/main/resources/checker.xsd"

    inputs.file ext.schema
    outputs.dir ext.sourcesDir

    doFirst() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }
        }
    }
}
// end::xsd[]

task afterEclipseImport {
    dependsOn "genJaxb"
}

compileJava.dependsOn genJaxb


// tag::jaxb[]
configurations {
    jaxb
}

dependencies {
    compile project(':common')

    // Provides the production database
    runtime 'org.hsqldb:hsqldb'

    // Provides java script libraries for static content
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.webjars:bootstrap:3.3.5'
    compile 'org.webjars:jquery:2.1.4'
    compile "org.apache.httpcomponents:httpclient:$httpClientVersion"
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.13'
    compile 'org.glassfish.jersey.core:jersey-server:2.13'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.13'
    compile 'org.glassfish.jersey.media:jersey-media-moxy:2.13'
    compile 'org.springframework.boot:spring-boot-starter-ws'
    compile 'org.springframework:spring-web:4.1.6.RELEASE'
    compile 'org.springframework.security:spring-security-crypto:3.1.0.RELEASE'
    compile("org.thymeleaf:thymeleaf-spring4")
    compile("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect")
    compile 'io.jsonwebtoken:jjwt:0.6.0'
    compile "wsdl4j:wsdl4j:1.6.1"
    compile 'org.springframework.plugin:spring-plugin-core:1.1.0.RELEASE'
//  compile files(genJaxb.classesDir).builtBy(genJaxb)
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.springframework:spring-messaging")

    jaxb 	"com.sun.xml.bind:jaxb-xjc:2.2.4-1"

    testCompile 'junit:junit:4.11'

    // Testing framework
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.apache.httpcomponents:httpclient:4.5'
    testCompile 'com.jayway.jsonpath:json-path:0.9.1'
}
